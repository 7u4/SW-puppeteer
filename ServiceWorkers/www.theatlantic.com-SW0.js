const version="triton";let debug=!1;const config={version:"vtriton::cache",offlinePage:"/offline/",caches:{bundles:/(static\/([a|b]\/)?frontend\/dist\/theatlantic\/js\/(bundle\/)?(hippo|ads|analytics)(.+)?)$/,fonts:/(static\/([a|b]\/)?frontend\/dist\/theatlantic\/(fonts)\/(.+)?)$/,system:/(static\/([a|b]\/)?frontend\/jspm_packages\/(system\.js))$/}};function log(){if(debug){const e=["%catl:serviceworker","color: #fa5732",...arguments];console.log.apply(console,e)}}function cacheName(e){return`${config.version}-${e}`}function addToCache(e,t,n){if(n.ok){const a=n.clone();caches.open(e).then(e=>{e.put(t,a)})}return n}async function onActivate(){log("onActivate");const e=(await caches.keys()).filter(e=>0!==e.indexOf(config.version));log("Old Cache Keys for deletion, ",e);const t=e.map(e=>caches.delete(e));return await Promise.all(t),log("Caches Purged, Activated New Service Worker"),self.clients.claim()}async function fetchFromCache(e){return caches.match(e.request).then(e=>{if(!e)throw Error("${e.request.url} not found in cache");return e})}function matchesPathPattern({pathname:e}){return!!Object.values(config.caches).filter(t=>t.test(e)).length}function getCacheNameByRequest({url:e}){const t=new URL(e),n=Object.keys(config.caches).find(e=>config.caches[e].test(t));if(n)return cacheName(n)}function shouldHandleStatic({url:e,method:t}){const n=new URL(e),a={matchesPathPattern:matchesPathPattern(n),isGETRequest:"GET"===t,isFromMyOrigin:"cdn.theatlantic.com"===n.hostname||n.origin===self.location.origin};return!Object.keys(a).filter(e=>!a[e]).length}function shouldHandleNavigation({mode:e,method:t,headers:n,url:a}){const c=new URL(a).searchParams;return"navigate"===e&&"GET"===t&&n.get("accept")&&n.get("accept").includes("text/html")&&!c.has("preview")}async function trimCache(e,t=10){const n=await caches.open(cacheName(e)),a=await n.keys();if(a.length>t)return n.delete(a[0]).then(trimCache(e,t))}self.addEventListener("message",e=>{if("debug"===e.data.command&&(debug=!0,log("Service Worker",version)),"trimCache"===e.data.command){const t=e.data.cache||"bundles";trimCache(t,e.data.size),log("Trimming cache of",t)}}),self.addEventListener("install",e=>{e.waitUntil(async function(){const e=await caches.open(cacheName("pages"));return await e.addAll([config.offlinePage]),self.skipWaiting()}())}),self.addEventListener("activate",e=>{log("activate"),e.waitUntil(onActivate())}),self.addEventListener("fetch",e=>{const t=e.request;if(shouldHandleNavigation(t)&&(log("Handling fetch event for",t.url),e.respondWith(fetch(t).catch(e=>(log("Fetch failed; returning offline page instead.",e),caches.match(config.offlinePage))))),shouldHandleStatic(t)){log("Handling static request for",t.url);const n=getCacheNameByRequest(t);e.respondWith(fetchFromCache(e).catch(()=>fetch(t)).then(e=>addToCache(n,t,e)))}});