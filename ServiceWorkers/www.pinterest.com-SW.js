/*
 * Autogenerated from ServiceWorkerPlugin
 */

const $VERSION = '1cdddb4d7b3131f34c87dff4302cd079';
const $DEBUG = false;
const $Cache = {
  "template": "/mnt/pinboard/webapp/webpack/plugins/lib/swTemplates/cache.js",
  "precacheChunks": [
    "gestalt",
    "www/_client-authdesktop",
    "www/index-authdesktop",
    "www/pin/[id]-authdesktop",
    "www/[username]-authdesktop",
    "www/search/[scope]-authdesktop",
    "vendor-react"
  ],
  "precache": [
    "https://s.pinimg.com/webapp/js/runtime-37b31c5ce2ec5bd8ab71.js",
    "https://s.pinimg.com/webapp/js/vendor-react-c5a0e8ad4dabbfafd694.js",
    "https://s.pinimg.com/webapp/js/0-7ca64904b9ed84d0146c.js",
    "https://s.pinimg.com/webapp/js/27-cf62873e4181672c3cd7.js",
    "https://s.pinimg.com/webapp/js/../style/42-ecfff804a46819e96e2a.css",
    "https://s.pinimg.com/webapp/js/42-e7cf359061d75deef50b.js",
    "https://s.pinimg.com/webapp/js/1-4452126502337dd503ac.js",
    "https://s.pinimg.com/webapp/js/2-6e13f9ff76ca172a4bd3.js",
    "https://s.pinimg.com/webapp/js/3-d55af3de884c19484bd4.js",
    "https://s.pinimg.com/webapp/js/7-404775211b70090d98e9.js",
    "https://s.pinimg.com/webapp/js/15-47dbc1464d1f118250a5.js",
    "https://s.pinimg.com/webapp/js/12-4c8778f167dd756f16a5.js",
    "https://s.pinimg.com/webapp/js/21-ca129e81420cfdecae5b.js",
    "https://s.pinimg.com/webapp/js/37-534a9dc3870ce0d53dc1.js",
    "https://s.pinimg.com/webapp/js/38-dc6544408f0be8622ba3.js",
    "https://s.pinimg.com/webapp/js/74-bfad0963d4a5a30d58f9.js",
    "https://s.pinimg.com/webapp/js/60-50898279b4f1018f8daa.js",
    "https://s.pinimg.com/webapp/js/../style/www/_client-authdesktop-1ba538156d6396453b6c.css",
    "https://s.pinimg.com/webapp/js/www/_client-authdesktop-56f924b9588165d653c6.js",
    "https://s.pinimg.com/webapp/js/6-13463782444b1407e4c0.js",
    "https://s.pinimg.com/webapp/js/10-06b2a436d31fa78ae1f9.js",
    "https://s.pinimg.com/webapp/js/16-e99245770a35a5184c3c.js",
    "https://s.pinimg.com/webapp/js/17-6d87347f8127bc51b202.js",
    "https://s.pinimg.com/webapp/js/18-58b18b57a1a192563b4d.js",
    "https://s.pinimg.com/webapp/js/11-e09cef1c7c5e4bcee38f.js",
    "https://s.pinimg.com/webapp/js/www/index-authdesktop-d2f4ec3c6911fea3108d.js",
    "https://s.pinimg.com/webapp/js/../style/www/pin/[id]-authdesktop-d8b5dde9ddd5ab570aef.css",
    "https://s.pinimg.com/webapp/js/www/pin/[id]-authdesktop-62af45705a3f1e69f433.js",
    "https://s.pinimg.com/webapp/js/../style/www/[username]-authdesktop-87d1e5837e1650e4a8aa.css",
    "https://s.pinimg.com/webapp/js/www/[username]-authdesktop-8f9a005b5bc7c771edd0.js",
    "https://s.pinimg.com/webapp/js/../style/www/search/[scope]-authdesktop-ab4e336def69b85f0391.css",
    "https://s.pinimg.com/webapp/js/www/search/[scope]-authdesktop-01153489ce3dff4e5535.js"
  ]
};
const $Notifications = {
  "fallbackURL": "_/_/push/web_push_content/",
  "default": {
    "title": "Fresh Pins!",
    "body": "Youâ€™ve got new Pins waiting for you on Pinterest.",
    "icon": "https://s.pinimg.com/images/favicon_red_192.png",
    "tag": "pinterest-push-notification-tag"
  },
  "duration": 300000,
  "template": "/mnt/pinboard/webapp/webpack/plugins/lib/swTemplates/notifications.js"
};
const $Log = {
  "notificationClicked": "_/_/push/web_push_click/"
};

// Setup Workbox
const workboxFileMapping = {"workbox-background-sync.dev.js":"workbox-background-sync.dev-92b16176a3ef8990f98b.js","workbox-background-sync.prod.js":"workbox-background-sync.prod-3895f8b6d7cb9eebd50e.js","workbox-broadcast-update.dev.js":"workbox-broadcast-update.dev-843a53603ebe19f731f6.js","workbox-broadcast-update.prod.js":"workbox-broadcast-update.prod-ba0165beec0543df3e40.js","workbox-cacheable-response.dev.js":"workbox-cacheable-response.dev-265099486204405b6f35.js","workbox-cacheable-response.prod.js":"workbox-cacheable-response.prod-8dbbc6414f43800544b6.js","workbox-core.prod.js":"workbox-core.prod-8b12042c44746b0cf2be.js","workbox-expiration.dev.js":"workbox-expiration.dev-f408071d2bb23f21162d.js","workbox-core.dev.js":"workbox-core.dev-71e6ed4ed02d696299b8.js","workbox-expiration.prod.js":"workbox-expiration.prod-fe8d463a1999929c0c6b.js","workbox-navigation-preload.dev.js":"workbox-navigation-preload.dev-a36b07ce9a7ae2101827.js","workbox-navigation-preload.prod.js":"workbox-navigation-preload.prod-1844355f7ad47b6bed9d.js","workbox-offline-ga.dev.js":"workbox-offline-ga.dev-85862a32fb830250e2e1.js","workbox-offline-ga.prod.js":"workbox-offline-ga.prod-fc5fec35325c986dfbb6.js","workbox-precaching.dev.js":"workbox-precaching.dev-709faf8a277f081f9549.js","workbox-precaching.prod.js":"workbox-precaching.prod-4433a4f1324a86288b4c.js","workbox-range-requests.dev.js":"workbox-range-requests.dev-cac47290c1f23916a7b6.js","workbox-range-requests.prod.js":"workbox-range-requests.prod-bbaf9ac8f95c69911162.js","workbox-routing.dev.js":"workbox-routing.dev-5c16f1b6df25a8b00527.js","workbox-routing.prod.js":"workbox-routing.prod-7933d5e507c4909d58e8.js","workbox-strategies.dev.js":"workbox-strategies.dev-1d23f26501fd1afd9c16.js","workbox-strategies.prod.js":"workbox-strategies.prod-615a8d88e4ceced4e4c0.js","workbox-streams.dev.js":"workbox-streams.dev-247214806389ebfa893a.js","workbox-streams.prod.js":"workbox-streams.prod-7635acdda4c313e22481.js","workbox-sw.js":"workbox-sw-e649c959cae8597d095a.js","workbox-window.dev.es5.mjs":"workbox-window.dev.es5-708a989d60432c2d3b8a.mjs","workbox-window.dev.mjs":"workbox-window.dev-f6bdfe423f6ac51777cc.mjs","workbox-window.dev.umd.js":"workbox-window.dev.umd-afbd013eb8e8f7e29713.js","workbox-window.prod.es5.mjs":"workbox-window.prod.es5-4ee99294e8ac3451801c.mjs","workbox-window.prod.mjs":"workbox-window.prod-ad65fbc98f9c6ca9a9ec.mjs","workbox-window.prod.umd.js":"workbox-window.prod.umd-298a5bd68e66e6a4692c.js"};
importScripts('https://s.pinimg.com/webapp/js/workbox-sw-e649c959cae8597d095a.js');
workbox.setConfig({ debug: false, modulePathPrefix: 'https://s.pinimg.com/webapp/js/', modulePathCb: 
  function getImportPath(moduleName, debug) {
    const env = debug ? 'dev' : 'prod';
    const fileName = `${moduleName}.${env}.js`;
    const hashedFilename = workboxFileMapping[fileName];
    return ['https://s.pinimg.com/webapp/js/', hashedFilename].join('');
  }
   });
// @flow
/* global $DEBUG, $Cache */

// $FlowFixMe
if (!$Cache) {
  // eslint-disable-next-line no-restricted-globals
  self.addEventListener('install', (event) => {
    event.waitUntil(
      // eslint-disable-next-line no-restricted-globals
      self.skipWaiting(),
    );
  });
}

function print(fn) {
  return function (message, group) {
    // $FlowFixMe
    if ($DEBUG) {
      // eslint-disable-next-line no-use-before-define
      if (group && logger.groups[group]) {
        // eslint-disable-next-line no-use-before-define
        logger.groups[group].push({
          fn,
          message,
        });
      } else {
        console[fn].call(console, message);
      }
    }
  };
}

const logger = {
  groups: {},
  group: (group) => {
    logger.groups[group] = [];
  },
  groupEnd: (group) => {
    const groupLogs = logger.groups[group];
    if (groupLogs && groupLogs.length > 0) {
      console.groupCollapsed(group);
      groupLogs.forEach((log) => {
        console[log.fn].call(console, log.message);
      });
      console.groupEnd();
    }
    delete logger.groups[group];
  },
  log: print('log'),
  warn: print('warn'),
  error: print('error'),
};

// @flow
/* global $VERSION, $Cache, workbox */

const OFFLINE_URL = 'offline.html/';
let cacheHitData = [];
const SW_SHELL_URL = '/sw-shell.html';

// $FlowFixMe
workbox.core.clientsClaim();
workbox.core.skipWaiting();

// $FlowFixMe
if ($Cache.appShell) {
  $Cache.precache.unshift({
    url: SW_SHELL_URL,
    // $FlowFixMe
    revision: $VERSION,
    // TODO(Yen): this isn't 100% accurate since $VERSION is based off the config in swConfigs, but it works for PROD since that takes into account the hashes for our bundles.
    // Ideally the revision for app_shell should also be based off a hash of mobile_auth_app_shell.html
    // (similar to dynamicUrlToDependencies for sw-precache or templatedUrls for workbox)
  });
} else {
  $Cache.precache.unshift({
    url: OFFLINE_URL,
    // $FlowFixMe
    revision: $VERSION,
  });
}
workbox.precaching.precacheAndRoute($Cache.precache);
workbox.precaching.cleanupOutdatedCaches();

if ($Cache.appShell) {
  workbox.routing.registerNavigationRoute(workbox.precaching.getCacheKeyForURL('/sw-shell.html'), {
    // TODO (Yen): Generate a whitelist from controllers
    blacklist: [
      new RegExp('/fb.html'),
      new RegExp('/manifest.json'),
      new RegExp('/robots.txt'),
      new RegExp('/sw.(js|html)'),
      new RegExp('/_/_/'),
      new RegExp(
        '/(about|amp|business|pw|secure|connect|analytics|template|website|download|oauth|iphone)/.*',
      ),
      new RegExp('/(offsite|invited|login|verify|help|jobs|careers|messages|)/'),
      new RegExp('/email/(remove|settings|unsubscribe|disassociate|update_settings|feedback)'),
    ],
  });
} else {
  // eslint-disable-next-line no-restricted-globals
  self.addEventListener('fetch', (event) => {
    if (
      event.request.mode === 'navigate' ||
      (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))
    ) {
      event.respondWith(fetch(event.request).catch((error) => caches.match(OFFLINE_URL)));
    }
  });
}

// Cache Hit Rate Logging
// eslint-disable-next-line no-restricted-globals
self.addEventListener('fetch', (event) => {
  if (
    event.request.mode === 'navigate' ||
    (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))
  ) {
    // This clears cache hit data any time any window being controlled by SW navigates.
    // Results will be inaccurate if user navigates in another tab while a PWT page timing is ongoing.
    // Add precache files to hits since we expect those to always be in the cache if sw is installed
    cacheHitData = $Cache.precache.map((path) =>
      path.url ? '' : path.substr(path.lastIndexOf('/') + 1),
    );
  }
});

// eslint-disable-next-line no-restricted-globals
self.addEventListener('message', (event) => {
  if (event.data.name === 'getCacheHitData') {
    event.ports[0].postMessage(cacheHitData);
  }
});

// @flow
/* global $Log, logger, clients, $Notifications */
/* eslint-disable no-use-before-define */

/*         -------- NOTIFICATIONS ---------         */

// eslint-disable-next-line no-restricted-globals
self.addEventListener('push', handleNotificationPush);
// eslint-disable-next-line no-restricted-globals
self.addEventListener('notificationclick', handleNotificationClick);

/*         -------- NOTIFICATIONS HANDLERS ---------         */

function handleNotificationPush(event) {
  // $FlowFixMe
  logger.log('Push notification received');
  logAction('', '_/_/push/web_push_log/push_notification_received/');

  // $FlowFixMe
  if ($Log.notificationReceived) {
    event.waitUntil(logNotificationReceived(event));
  }

  // Show notification or fallback
  if (event.data && event.data.title) {
    event.waitUntil(showNotification(event.data));
    // $FlowFixMe
  } else if ($Notifications.fallbackURL) {
    event.waitUntil(
      // eslint-disable-next-line no-restricted-globals
      self.registration.pushManager
        .getSubscription()
        .then(fetchNotification)
        .then(convertResponseToJson)
        .then(showNotification)
        .catch(showNotification),
    );
  } else {
    logger.warn('No notification.data and no fallbackURL.');
    event.waitUntil(showNotification());
  }
}

function handleNotificationClick(event) {
  // $FlowFixMe
  logger.log('Push notification clicked.', event.notification.tag);
  logAction('', '_/_/push/web_push_log/push_notification_clicked/');

  // $FlowFixMe
  if ($Log.notificationClicked) {
    event.waitUntil(logNotificationClick(event));
  }

  // Open the url if provided
  if (event.notification.data && event.notification.data.url) {
    const { url } = event.notification.data;
    event.waitUntil(openWindow(url));
  } else if (event.notification.tag.indexOf(':') !== -1) {
    // TODO: Deprecate
    const url = event.notification.tag.split(':')[2] || '/';
    event.waitUntil(openWindow(url));
  } else {
    logger.warn('Cannot route click with no data.url property. Using "/".', event.notification.tag);
    event.waitUntil(openWindow('/'));
  }

  event.notification.close();
  logger.groupEnd(event.notification.tag);
}

/*         -------- NOTIFICATIONS HELPERS ---------         */

function showNotification(data) {
  if (!data || !data.tag) {
    // $FlowFixMe
    data = $Notifications.default;
  }
  // $FlowFixMe
  logger.group(data.tag);
  logger.log('Show notification.', data.tag);
  logAction('', '_/_/push/web_push_log/call_google_show_notification_api/');
  // eslint-disable-next-line no-restricted-globals
  return self.registration.showNotification(data.title, data).then(delayDismissNotification);
}

function fetchNotification(subscription) {
  if (!subscription) {
    // $FlowFixMe
    logger.warn('No subscription found.');
    throw new Error('No subscription found.');
  }
  // $FlowFixMe
  logger.log('Fetching remote notification data.');
  logAction('', '_/_/push/web_push_log/fetch_remote_notification_data/');
  const queries = {
    endpoint: subscription.endpoint,
  };
  // $FlowFixMe
  const url = formatUrl($Notifications.fallbackURL, queries);
  return fetch(url, { credentials: 'include' });
}

function convertResponseToJson(response) {
  if (response.status !== 200) {
    throw new Error('Notification data fetch failed.');
  }
  logAction('', '_/_/push/web_push_log/convert_response_to_json/');
  return response.json();
}

function delayDismissNotification() {
  logAction('', '_/_/push/web_push_log/call_show_notification_success/');
  setTimeout(() => {
    // eslint-disable-next-line no-restricted-globals
    self.registration.getNotifications().then((notifications) => {
      notifications.forEach((notification) => {
        notification.close();
        // $FlowFixMe
        logger.log('Dismissing notification.', notification.tag);
        logger.groupEnd(notification.tag);
      });
    });
    // $FlowFixMe
  }, $Notifications.duration || 5000);
}

function openWindow(url) {
  if (clients.openWindow) {
    return clients.openWindow(url);
  }
  return Promise.resolve();
}

function logNotificationReceived(event) {
  // $FlowFixMe
  return logAction(event, $Log.notificationReceived);
}

function logNotificationClick(event) {
  // $FlowFixMe
  return logAction(event.notification, $Log.notificationClicked);
}

function logAction(notification, url) {
  // $FlowFixMe
  logger.log(`Send log event to ${url}.`, notification.tag);
  // eslint-disable-next-line no-restricted-globals
  return self.registration.pushManager.getSubscription().then((subscription) => {
    const query = {
      endpoint: subscription.endpoint,
      // $FlowFixMe
      tag: notification.tag,
    };
    return fetch(formatUrl(url, query), { credentials: 'include' });
  });
}

function formatUrl(url, queries) {
  const prefix = url.includes('?') ? '&' : '?';
  const query = Object.keys(queries)
    // $FlowFixMe
    .map((key) => `${key}=${queries[key]}`)
    .join('&');
  return url + prefix + query;
}

/* eslint-enable no-use-before-define */
